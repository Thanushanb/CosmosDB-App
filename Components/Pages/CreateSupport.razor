@page "/create-support"
@rendermode InteractiveServer
@using SupportApp.Models
@inject NavigationManager Nav
@inject HttpClient Http

<h1>Opret supporthenvendelse</h1>

@if (_success != null)
{
    <div class="alert alert-success">@_success</div>
}

@if (_error != null)
{
    <div class="alert alert-danger">@_error</div>
}

<EditForm Model="_model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Navn</label>
        <InputText class="form-control" @bind-Value="_model.CustomerName" />
    </div>

    <div class="mb-3">
        <label>Email</label>
        <InputText class="form-control" @bind-Value="_model.Email" />
    </div>

    <div class="mb-3">
        <label>Emne</label>
        <InputText class="form-control" @bind-Value="_model.Category" />
    </div>

    <div class="mb-3">
        <label>Besked</label>
        <InputTextArea class="form-control" rows="5" @bind-Value="_model.Message" />
    </div>
    

    <button class="btn btn-primary" type="submit">Opret henvendelse</button>
</EditForm>

@code {
    private SupportMessage _model = new();
    private string? _success;
    private string? _error;

    private async Task HandleValidSubmit()
    {
        try
        {
            _success = null;
            _error = null;
            
            var baseUrl = Nav.BaseUri;
            var response = await Http.PostAsJsonAsync($"{baseUrl}SupportMessages", _model);
            
            if (response.IsSuccessStatusCode)
            {
                _success = "Henvendelsen er oprettet.";
                _model = new();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                _error = $"Fejl: {response.StatusCode} - {errorContent}";
            }
        }
        catch (Exception ex)
        {
            _error = $"Fejl ved oprettelse: {ex.Message}";
        }
    }
}